generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled — runtime queries
  directUrl = env("DIRECT_DATABASE_URL") // direct — migrations
}

model Bootstrap {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Auth tokens
  tokens RefreshToken[]

  // Optional profile
  senderName String? @db.VarChar(11) // default SMS sender (3-11 alphanumeric)
  company    String? @db.VarChar(160)

  // Back-relations (named where needed)
  ownedCampaigns   Campaign[]        @relation("CampaignOwner")
  createdCampaigns Campaign[]        @relation("CampaignCreator")
  contacts         Contact[]
  lists            List[]
  templates        MessageTemplate[]
  messages         CampaignMessage[]
  redemptions      Redemption[]
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())

  @@index([userId])
}

model Contact {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  phone     String
  email     String?  @db.VarChar(320)
  firstName String?  @db.VarChar(120)
  lastName  String?  @db.VarChar(120)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // subscription state
  isSubscribed         Boolean   @default(true)
  unsubscribeTokenHash String?   @db.VarChar(64)
  unsubscribedAt       DateTime?

  memberships ListMembership[]
  messages    CampaignMessage[]

  @@unique([ownerId, phone]) // unique per owner
  @@index([unsubscribeTokenHash])
  @@index([ownerId])
}

model List {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name        String   @db.VarChar(160)
  description String?  @db.VarChar(400)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships ListMembership[]
  campaigns   Campaign[]

  @@unique([ownerId, name]) // unique per owner
  @@index([ownerId])
}

model ListMembership {
  id        Int      @id @default(autoincrement())
  listId    Int
  contactId Int
  createdAt DateTime @default(now())

  list    List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([listId, contactId])
  @@index([contactId])
  @@index([listId])
}

enum CampaignStatus {
  draft
  scheduled
  sending
  paused
  completed
  failed
}

model MessageTemplate {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name      String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns Campaign[]

  @@unique([ownerId, name]) // template names unique per owner
  @@index([ownerId])
}

model Campaign {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(name: "CampaignOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  name       String
  templateId Int
  template   MessageTemplate @relation(fields: [templateId], references: [id], onDelete: Restrict)
  listId     Int
  list       List            @relation(fields: [listId], references: [id], onDelete: Restrict)

  status      CampaignStatus @default(draft)
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  total       Int            @default(0)
  sent        Int            @default(0)
  failed      Int            @default(0)

  createdById Int
  createdBy   User @relation(name: "CampaignCreator", fields: [createdById], references: [id], onDelete: Restrict)

  messages CampaignMessage[]

  @@index([status])
  @@index([scheduledAt])
  @@index([createdAt])
  @@index([ownerId])
}

enum MessageStatus {
  queued
  sent
  delivered
  failed
}

model CampaignMessage {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  contactId Int
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  to   String
  text String @default("") @db.Text

  trackingId String @unique // unique QR/link id per message

  status MessageStatus @default(queued)

  providerMessageId String?
  error             String?
  createdAt         DateTime  @default(now())
  sentAt            DateTime?
  deliveredAt       DateTime?
  failedAt          DateTime?

  redemption Redemption?

  @@index([campaignId])
  @@index([contactId])
  @@index([status])
  @@index([providerMessageId])
  @@index([ownerId])
}

model Redemption {
  messageId Int             @id
  message   CampaignMessage @relation(fields: [messageId], references: [id])

  campaignId Int
  contactId  Int

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  redeemedAt       DateTime @default(now())
  redeemedByUserId Int?
  evidenceJson     Json?

  @@index([campaignId])
  @@index([contactId])
  @@index([ownerId])
}

model WebhookEvent {
  id                Int      @id @default(autoincrement())
  provider          String
  eventType         String
  receivedAt        DateTime @default(now())
  payload           Json
  providerMessageId String?

  @@index([provider, eventType])
  @@index([providerMessageId])
}
