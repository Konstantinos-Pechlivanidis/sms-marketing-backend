// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")         // pooled — runtime queries
  directUrl = env("DIRECT_DATABASE_URL")  // direct — migrations
}

/**
 * =========================
 * Bootstrap / housekeeping
 * =========================
 */
model Bootstrap {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

/**
 * =========================
 * Users & auth
 * =========================
 */
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Optional profile
  senderName String? @db.VarChar(11)   // SMS sender (3–11 alphanumeric)
  company    String? @db.VarChar(160)

  // Auth tokens
  tokens RefreshToken[]

  // Back-relations
  ownedCampaigns    Campaign[]          @relation("CampaignOwner")
  createdCampaigns  Campaign[]          @relation("CampaignCreator")
  contacts          Contact[]
  lists             List[]
  templates         MessageTemplate[]
  messages          CampaignMessage[]
  redemptions       Redemption[]
  Wallet            Wallet?
  CreditTransaction CreditTransaction[]
  Purchase          Purchase[]
  automations       Automation[]        @relation("UserAutomations")
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())

  @@index([userId])
}

/**
 * =========================
 * Contacts & lists
 * =========================
 */

enum Gender {
  male
  female
  other
  unknown
}

model Contact {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Store E.164; 15 max digits + '+' fits in 20 chars
  phone     String   @db.VarChar(20)
  email     String?  @db.VarChar(320)
  firstName String?  @db.VarChar(120)
  lastName  String?  @db.VarChar(120)

  // NEW: segmentation & automations
  gender   Gender   @default(unknown)
  birthday DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // subscription state
  isSubscribed         Boolean   @default(true)
  unsubscribeTokenHash String?   @db.VarChar(64)
  unsubscribedAt       DateTime?

  memberships ListMembership[]
  messages    CampaignMessage[]

  @@unique([ownerId, phone]) // unique per owner
  @@index([unsubscribeTokenHash])
  @@index([ownerId])
  @@index([firstName])
  @@index([lastName])
  @@index([gender])
  @@index([birthday])
}

model List {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name        String   @db.VarChar(160)
  description String?  @db.VarChar(400)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // NEW: system lists (e.g., male/female) auto-managed by backend
  isSystem Boolean  @default(false)
  slug     String?  @db.VarChar(40) // e.g., "male", "female" for system lists

  memberships ListMembership[]
  campaigns   Campaign[]

  @@unique([ownerId, name])      // human-created lists unique per owner
  @@unique([ownerId, slug])      // prevents duplicate system slugs per owner (slug must be set for system lists)
  @@index([ownerId])
}

model ListMembership {
  id        Int      @id @default(autoincrement())
  listId    Int
  contactId Int
  createdAt DateTime @default(now())

  list    List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([listId, contactId])
  @@index([contactId])
  @@index([listId])
}

/**
 * =========================
 * Campaigns & templates
 * =========================
 */
enum CampaignStatus {
  draft
  scheduled
  sending
  paused
  completed
  failed
}

model MessageTemplate {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name      String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns Campaign[]

  @@unique([ownerId, name]) // template names unique per owner
  @@index([ownerId])
}

model Campaign {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(name: "CampaignOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  name         String
  templateId   Int?                // <- nullable now
  template     MessageTemplate?    @relation(fields: [templateId], references: [id], onDelete: Restrict)

  listId       Int?                // <- nullable now
  list         List?               @relation(fields: [listId], references: [id], onDelete: Restrict)

  // New: allow free-typed message (when no template)
  bodyOverride String?             @db.Text

  status      CampaignStatus @default(draft)
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  total       Int            @default(0)
  sent        Int            @default(0)
  failed      Int            @default(0)

  createdById Int
  createdBy   User @relation(name: "CampaignCreator", fields: [createdById], references: [id], onDelete: Restrict)

  messages CampaignMessage[]

  @@index([status])
  @@index([scheduledAt])
  @@index([createdAt])
  @@index([ownerId])
}


/**
 * =========================
 * Messages & tracking
 * =========================
 */
enum MessageStatus {
  queued
  sent
  delivered
  failed
}

model CampaignMessage {
  id Int @id @default(autoincrement())

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  contactId Int
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  to   String
  text String @default("") @db.Text

  trackingId String @unique // unique QR/link id per message

  status MessageStatus @default(queued)

  providerMessageId String?
  error             String?
  createdAt         DateTime  @default(now())
  sentAt            DateTime?
  deliveredAt       DateTime?
  failedAt          DateTime?

  redemption Redemption?

  @@index([campaignId])
  @@index([contactId])
  @@index([status])
  @@index([providerMessageId])
  @@index([ownerId])
  @@index([campaignId, status]) // quick "any queued left?" checks
}

model Redemption {
  messageId Int             @id
  message   CampaignMessage @relation(fields: [messageId], references: [id])

  campaignId Int
  contactId  Int

  // OWNER SCOPE
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Visit counters for offer/QR page
  visits        Int       @default(0)
  lastVisitedAt DateTime?

  // Redemption moment (one-time redeem)
  redeemedAt       DateTime @default(now())
  redeemedByUserId Int?
  evidenceJson     Json?

  @@index([campaignId])
  @@index([contactId])
  @@index([ownerId])
}

/**
 * =========================
 * Webhooks audit
 * =========================
 */
model WebhookEvent {
  id                Int      @id @default(autoincrement())
  provider          String
  eventType         String
  receivedAt        DateTime @default(now())
  payload           Json
  providerMessageId String?

  @@index([provider, eventType])
  @@index([providerMessageId])
}

/**
 * =========================
 * Billing (wallet, purchases)
 * =========================
 */
enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum CreditTxnType {
  credit // e.g. admin topup, purchase
  debit  // e.g. campaign enqueue
  refund // e.g. immediate provider hard-fail
}

model Wallet {
  id        Int      @id @default(autoincrement())
  ownerId   Int      @unique
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  balance   Int      @default(0) // credits balance
  updatedAt DateTime @updatedAt

  transactions CreditTransaction[]
}

model CreditTransaction {
  id           Int           @id @default(autoincrement())
  ownerId      Int
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  type         CreditTxnType
  amount       Int // positive integer (credits)
  balanceAfter Int // snapshot of wallet balance after this txn
  reason       String?       @db.VarChar(200)
  campaignId   Int?
  messageId    Int?
  meta         Json?
  createdAt    DateTime      @default(now())
  Wallet       Wallet?       @relation(fields: [walletId], references: [id])
  walletId     Int?

  @@index([ownerId])
  @@index([campaignId])
  @@index([messageId])
}

model Package {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  units      Int        // credits included
  priceCents Int        // price in cents (for reference)
  active     Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Purchase   Purchase[]
}

model Purchase {
  id                      Int            @id @default(autoincrement())
  ownerId                 Int
  packageId               Int
  units                   Int
  priceCents              Int
  status                  PaymentStatus  @default(pending)

  // New (optional but recommended)
  stripeSessionId         String?        @unique
  stripePaymentIntentId   String?        @unique

  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  owner                   User           @relation(fields: [ownerId], references: [id])
  package                 Package        @relation(fields: [packageId], references: [id])
}
/**
 * =========================
 * Automations MVP
 * =========================
 */
model Automation {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  title     String
  message   String
  isActive  Boolean  @default(false)
  trigger   String   // 'birthday' | 'nameday' | ...
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NEW
  isSystem   Boolean @default(false)
  systemSlug String? @db.VarChar(40)

  owner User @relation("UserAutomations", fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId, isActive])
  @@index([ownerId, trigger])
  @@unique([ownerId, systemSlug])
}

